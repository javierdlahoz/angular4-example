Index: lib/exporter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/exporter.js	(revision )
+++ lib/exporter.js	(revision )
@@ -0,0 +1,19 @@
+'use strict';
+
+let Promise = require('bluebird');
+let path = require('path');
+let fs = Promise.promisifyAll(require('fs'));
+
+class Exporter {
+
+  constructor(outputDir, renderer) {
+
+  }
+
+  private exportLibraries() {
+    
+  }
+
+}
+
+module.exports = Exporter;
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(date 1475750831000)
+++ README.md	(revision )
@@ -45,6 +45,7 @@
   -p, --port        Port number to listen on       [default: 4040]
   -h, --host        Host address to bind to        [default: "localhost"]
   -i, --images-dir  Directory to store images      [default: "images"]
+  -e, --export      Export static html to the specified path [default: "html"]      
   -o, --open        Open default browser on start
   --help            Show this help
 ```
Index: hads.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hads.js	(date 1475750831000)
+++ hads.js	(revision )
@@ -27,6 +27,9 @@
   .alias('i', 'images-dir')
   .describe('i', 'Directory to store images')
   .default('i', 'images')
+  .alias('e', 'export')
+  .describe('e', 'Export static html to the specified dir')
+  .default('e', 'html')
   .alias('o', 'open')
   .boolean('o')
   .describe('o', 'Open default browser on start')
@@ -223,12 +226,16 @@
 }]);
 
 indexer.indexFiles().then(() => {
-  app.listen(args.port, args.host, () => {
-    let serverUrl = `http://${args.host}:${args.port}`;
-    console.log(`${pkg.name} ${pkg.version} serving at ${serverUrl} (press CTRL+C to exit)`);
+  if (args.export) {
+
+  } else {
+    app.listen(args.port, args.host, () => {
+      let serverUrl = `http://${args.host}:${args.port}`;
+      console.log(`${pkg.name} ${pkg.version} serving at ${serverUrl} (press CTRL+C to exit)`);
 
-    if (args.open) {
-      require('open')(serverUrl);
-    }
-  });
+      if (args.open) {
+        require('open')(serverUrl);
+      }
+    });
+  }
 });
